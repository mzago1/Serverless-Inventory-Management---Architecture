# S3 bucket resource
resource "aws_s3_bucket" "inventory_bucket" {
  bucket = "inventory-bucket-example"
  acl    = "private"
}

# IAM role for Lambda execution
resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda-execution-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      Action    = "sts:AssumeRole"
    }]
  })

  # Policy granting permissions to read from S3
  policy {
    policy = jsonencode({
      Version = "2012-10-17"
      Statement = [{
        Effect    = "Allow"
        Action    = ["s3:GetObject"]
        Resource  = aws_s3_bucket.inventory_bucket.arn
      }]
    })
  }
}

# Lambda function resource
resource "aws_lambda_function" "import_inventory_lambda" {
  function_name    = "import_inventory_lambda"
  filename         = "lambda_function.zip"
  source_code_hash = filebase64sha256("lambda_function.zip")
  handler          = "lambda_function.lambda_handler"
  runtime          = "python3.8"
  role             = aws_iam_role.lambda_execution_role.arn

  environment {
    variables = {
      S3_BUCKET_NAME = aws_s3_bucket.inventory_bucket.bucket
    }
  }
}

# Lambda permission to allow S3 to invoke the Lambda function
resource "aws_lambda_permission" "s3_invoke_permission" {
  statement_id  = "AllowExecutionFromS3"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.import_inventory_lambda.arn
  principal     = "s3.amazonaws.com"

  source_arn = aws_s3_bucket.inventory_bucket.arn
}

# S3 bucket notification configuration to trigger Lambda function
resource "aws_s3_bucket_notification" "inventory_bucket_notification" {
  bucket = aws_s3_bucket.inventory_bucket.bucket

  lambda_function {
    lambda_function_arn = aws_lambda_function.import_inventory_lambda.arn
    events              = ["s3:ObjectCreated:*"]
    filter_prefix       = "inventory_files/"
    filter_suffix       = ".csv"
  }
}

-----------------------LAMBDA FUNCTION------------------------

import boto3
import csv
from datetime import datetime

# Get environment variables
S3_BUCKET_NAME = os.environ['S3_BUCKET_NAME']
DYNAMODB_TABLE_NAME = os.environ['DYNAMODB_TABLE_NAME']

# Connection to DynamoDB
ddb = boto3.resource('dynamodb')
table = ddb.Table(DYNAMODB_TABLE_NAME)

def lambda_handler(event, context):
    # Loop through records in the event
    for record in event['Records']:
        # Get the bucket and key from the event record
        bucket_name = record['s3']['bucket']['name']
        object_key = record['s3']['object']['key']
        
        # Check if the object is a CSV file
        if object_key.endswith('.csv'):
            # Read the CSV file from S3
            s3 = boto3.client('s3')
            csv_obj = s3.get_object(Bucket=bucket_name, Key=object_key)
            lines = csv_obj['Body'].read().decode('utf-8').splitlines()
            
            # Read the CSV using tab delimiter
            reader = csv.DictReader(lines, delimiter='\t')
            
            # Loop through the rows of the CSV and insert into DynamoDB
            for row in reader:
                try:
                    # Format the timestamp for DynamoDB
                    timestamp = datetime.strptime(row['Timestamp'], '%Y-%m-%dT%H:%M:%S.%f%z')
                    timestamp_str = timestamp.strftime('%Y-%m-%dT%H:%M:%S')
                    
                    # Insert data into DynamoDB table
                    table.put_item(
                        Item={
                            'Timestamp': timestamp_str,
                            'WarehouseName': row['WarehouseName'],
                            'ItemId': row['ItemId'],
                            'ItemName': row['ItemName'],
                            'StockLevelChange': int(row['StockLevelChange'])
                        }
                    )
                except KeyError as e:
                    print(f"Failed to process CSV file. Missing column: {e}")
                except Exception as e:
                    print(f"Failed to insert data into DynamoDB: {e}")

